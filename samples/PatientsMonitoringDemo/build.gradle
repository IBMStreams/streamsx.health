buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'de.undercouch:gradle-download-task:3.1.2'
    }
}

apply plugin: 'de.undercouch.download'
apply plugin: 'java'
apply from: '../../common.gradle'

sourceSets {
    main {
        java {
            srcDir 'impl/java/src'
        }
    }   
}

repositories { mavenCentral() }

dependencies {
	compile fileTree(dir : '../../simulate/com.ibm.streamsx.health.simulate.beacon/build/libs', include : ['*.jar'])
	compile fileTree(dir : '../../ingest/common/com.ibm.streamsx.health.ingest/lib', include : ['*.jar'])
	compile fileTree(dir: System.getenv("STREAMS_INSTALL") + '/lib', include: ['*.jar'])
	compile fileTree(dir: System.getenv("STREAMS_INSTALL") + '/toolkits/com.ibm.streamsx.topology/lib', include : ['*.jar'])
	compile group: 'commons-cli', name: 'commons-cli', version: '1.3.1'
}


import de.undercouch.gradle.tasks.download.Download
task downloadJS(type: Download) {
		src([
			'https://code.jquery.com/jquery-3.1.1.min.js',
			'http://cdn.pydata.org/bokeh/release/bokeh-0.12.0.min.js',
			'http://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.0.min.js',
			'https://cdnjs.cloudflare.com/ajax/libs/numeral.js/2.0.4/numeral.min.js',
			'https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js'
			])
		dest 'etc/html/health/assets/js'
}

task downloadCSS(type: Download) {
		src ([
			'http://cdn.pydata.org/bokeh/release/bokeh-0.12.0.min.css',
			'http://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.0.min.css',
			'https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css'	
			])
		dest 'etc/html/health/assets/css'
}

task buildToolkit {
	doLast {
		splMakeToolkit()
	}
}

task cleanToolkit {
    doLast {
        splCleanToolkit()
    }
}

task cleanup(type: Delete) {
    // clean web deps
    delete fileTree(dir : "etc/html/health/assets/js")
    delete fileTree(dir : "etc/html/health/assets/css", exclude: "custom.css")

    // clean toolkit deps
    delete '.toolkits/com.ibm.streamsx.health.analyze.vital'
    delete '.toolkits/com.ibm.streamsx.inet'

    // clean impl/java/bin
    delete 'impl/java/bin'

    // clean opt
    delete 'opt'
    
    delete fileTree('.') {
        include '*.sab'
    }
}

task execute(type: JavaExec) {
	main = 'com.ibm.streamsx.health.demo.PatientsMonitoringDemo'
	classpath = sourceSets.main.runtimeClasspath
}

task bundle(type: JavaExec) {
    main = 'com.ibm.streamsx.health.demo.PatientsMonitoringDemo'
    classpath = sourceSets.main.runtimeClasspath
    args '-t', 'BUNDLE'
}

task getDeps(type: Copy) {
	from configurations.runtime
	into 'opt/downloaded'
	include '*commons*.jar'
}

task extractDeps(type: Copy) {
    def deps = file('.toolkits/toolkit_deps.tar.gz')
    from tarTree(deps)
    into '.toolkits'
}

build.dependsOn downloadJS, downloadCSS, extractDeps, buildToolkit
build.finalizedBy getDeps
clean.dependsOn cleanup, cleanToolkit
