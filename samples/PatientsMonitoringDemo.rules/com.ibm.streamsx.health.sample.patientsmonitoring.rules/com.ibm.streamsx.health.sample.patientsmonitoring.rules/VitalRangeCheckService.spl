// begin_generated_IBM_copyright_prolog                                       
//                                                                            
// This is an automatically generated copyright prolog.                       
// After initializing,  DO NOT MODIFY OR MOVE                                 
//****************************************************************************
// Copyright (C) 2016 International Business Machines Corporation             
// All Rights Reserved                                                        
//****************************************************************************
// end_generated_IBM_copyright_prolog                
namespace com.ibm.streamsx.health.sample.patientsmonitoring.rules ;

use com.ibm.streamsx.health.ingest.connector::IngestSubscribe ;
use com.ibm.streamsx.health.ingest.types::* ;
use com.ibm.streamsx.health.sample.patientsmonitoring.rules.generated::HealthRules ;
use com.ibm.streamsx.health.sample.patientsmonitoring.rules.generated.demo::Patient ;
use com.ibm.streamsx.topology.topic::Publish ;
use com.ibm.streamsx.json::TupleToJSON ;
use com.ibm.streamsx.health.sample.patientsmonitoring.rules.connectors::VitalsRangeCheckPublish ;
use com.ibm.streamsx.health.sample.patientsmonitoring.rules.connectors::PatientAlert;
use com.ibm.streamsx.health.ingest.types.resolver::*;


Patient newPatient()
{
	mutable Patient patient = { } ;
	patient.age = 18 ;
	patient.bpDiastolic = 80 ;
	patient.bpSystolic = 120 ;
	patient.heartRate =(float32) 70 ;
	patient.spO2 = 95 ;
	patient.temperature =(float32) 98.6 ;
	return patient ;
}

Patient populate(mutable Patient patient, Observation observation)
{
	if(isHeartRate(observation.reading.readingType.code))
	{
		patient.heartRate =(float32) observation.reading.value ;
	}

	if(isBPSystolic(observation.reading.readingType.code))
	{
		patient.bpSystolic =(int32) observation.reading.value ;
	}

	if(isBPDiastolic(observation.reading.readingType.code))
	{
		patient.bpDiastolic =(int32) observation.reading.value ;
	}

	if(isTemperature(observation.reading.readingType.code))
	{
		patient.temperature =(float32) observation.reading.value ;
	}

	if(isSpO2(observation.reading.readingType.code))
	{
		patient.spO2 =(int32) observation.reading.value ;
	}

	return patient ;
}

composite VitalsCheck(input In0 ; output Out0)
{
	graph
		(stream<Patient i_Patient> Custom_3_out0) as Custom_3 = Custom(In0 as
			inPort0Alias)
		{
			logic
				state :
				{
					mutable map<rstring, Patient> patientMap = { } ;
				}

				onTuple inPort0Alias :
				{
					rstring patientId = inPort0Alias.obx.patientId ;
					if(has(patientMap, patientId) == false)
					{
						mutable Patient p = newPatient() ;
						p.name =(ustring) patientId ;
						populate(p, inPort0Alias.obx) ;
						insertM(patientMap, patientId, p) ;
						submit({ i_Patient = p }, Custom_3_out0) ;
					}

					else
					{
						mutable Patient p = patientMap [ patientId ] ;
						populate(p, inPort0Alias.obx) ;
						insertM(patientMap, patientId, p) ;
						submit({ i_Patient = p }, Custom_3_out0) ;
					}

				}

		}

		(stream<Patient o_Patient> HealthRules_2_out0) as HealthRules_2 =
			HealthRules(Custom_3_out0)
		{
		}

		(stream<ustring patientId, boolean alert, list<ustring> messages> Out0) as
			Functor_5 = Functor(HealthRules_2_out0)
		{
			output
				Out0 : patientId = HealthRules_2_out0.o_Patient.name, alert =
					HealthRules_2_out0.o_Patient.alert, messages =
					HealthRules_2_out0.o_Patient.messages ;
		}

}

public composite VitalRangeCheckService
{
	graph
		(stream<Observation> Readings) as IngestSubscribe_1 = IngestSubscribe()
		{
			param
				topic : getSubmissionTimeValue("ingestTopic", "ingest-beacon") ;
		}

		() as VitalsRangeCheckPublish_5 = VitalsRangeCheckPublish(VitalsCheck_7_out0
			as inPort0Alias)
		{
		}

		(stream<Observation obx, rstring pid> Functor_6_out0) as Functor_6 =
			Functor(Readings)
		{
			output
				Functor_6_out0 : obx = Readings, pid = patientId ;
		}

		@parallel(width = 10, partitionBy = [ { port = Functor_6_out0, attributes = [
			pid ] } ])
		(stream<PatientAlert>
			VitalsCheck_7_out0) as VitalsCheck_7 = VitalsCheck(Functor_6_out0)
		{
		}

}




