namespace com.ibm.streamsx.health.demo.ui ;

use com.ibm.streamsx.inet.rest::* ;
use com.ibm.streamsx.health.ingest.types::* ;
use com.ibm.streamsx.health.ingest.connector::* ;
use com.ibm.streamsx.topology.topic::* ;
use com.ibm.streamsx.json::* ;
use com.ibm.streamsx.health.analyze.vital::* ;

public composite UIService
{
	type
		AlertType = rstring patientId, boolean alert, list<rstring> messages ;
	graph
		() as Status = HTTPTupleView(Custom_5_out0 as inPort0Alias)
		{
			window
				inPort0Alias : sliding, count(1) ;
			param
				port : 8080 ;
				context : "health" ;
				contextResourceBase : getThisToolkitDir() + "/etc/html/health" ;
//				contextResourceBase : "/home/streamsadmin/git/streamsx.health/samples/VisualizationDemo/etc/html/health";
			config
				placement : partitionColocation("ui") ;
		}

		(stream<PublishJson_T> HTTPTupleInjection_3_out0) as Simulate =
			HTTPTupleInjection()
		{
			param
				port : 8080 ;
				context : "health" ;
				contextResourceBase : getThisToolkitDir() + "/etc/html/health" ;
//				contextResourceBase : "/home/streamsadmin/git/streamsx.health/samples/VisualizationDemo/etc/html/health";
			config
				placement : partitionColocation("ui") ;
		}

		() as Publish_4 = Publish(HTTPTupleInjection_3_out0)
		{
			param
				topic : "manipulator.control.input" ;
		}

		(stream<map<rstring, AlertType> patientMap> Custom_5_out0) as Custom_5 =
			Custom(JSONToTuple_6_out0 as inPort0Alias)
		{
			logic
				state :
				{
					mutable map<rstring, AlertType> patientMap ;
				}

				onTuple inPort0Alias :
				{
					insertM(patientMap, patientId, inPort0Alias) ;
					submit({ patientMap = patientMap }, Custom_5_out0) ;
				}

		}

		(stream<Observation_T> IngestSubscribe_7_out0) as IngestSubscribe_7 =
			IngestSubscribe()
		{
			param
				topic : "patient-manipulator-topic" ;
		}

		() as VitalsData = HTTPTupleView(Functor_11_out0 as inPort0Alias)
		{
			window
				inPort0Alias : tumbling, count(1), partitioned ;
			param
				partitionKey : "patient_id", "readingType" ;
				port : 8080 ;
				context : "health" ;
				contextResourceBase : getThisToolkitDir() + "/etc/html/health" ;
//				contextResourceBase : "/home/streamsadmin/git/streamsx.health/samples/VisualizationDemo/etc/html/health";
			config
				placement : partitionColocation("ui") ;
		}

		(stream<AlertType> JSONToTuple_6_out0) as JSONToTuple_6 =
			JSONToTuple(Subscribe_1_out0)
		{
		}

		(stream<PublishJson_T> Subscribe_1_out0) as Subscribe_1 = Subscribe()
		{
			param
				topic :
					com.ibm.streamsx.health.analyze.vital.connectors::TOPIC_VITALSRANGECHECK() ;
				streamType : PublishJson_T ;
		}

		(stream<Observation_T, tuple<rstring patient_id, rstring readingType>>
			Functor_11_out0) as Functor_11 = Functor(IngestSubscribe_7_out0 as
			inPort0Alias)
		{
			param
				filter :(reading.readingType == "HR" || reading.readingType == "ABPsys" ||
					reading.readingType == "ABPdias" || reading.readingType == "Temperature"
					|| reading.readingType == "SpO2") ;
			output
				Functor_11_out0 : patient_id = patientId, readingType =
					reading.readingType ;
		}

		() as WaveformData = HTTPTupleView(Aggregate_12_out0 as inPort0Alias)
		{
			window
				inPort0Alias : sliding, count(3), count(1), partitioned ;
			param
				partitionKey : "patient_id", "readingType" ;
				port : 8080 ;
				context : "health" ;
				contextResourceBase : getThisToolkitDir() + "/etc/html/health" ;
//				contextResourceBase : "/home/streamsadmin/git/streamsx.health/samples/VisualizationDemo/etc/html/health";
			config
				placement : partitionColocation("ui") ;
		}

		(stream<Observation_T, tuple<rstring patient_id, rstring readingType>>
			Functor_12_out0) as Functor_12 = Functor(IngestSubscribe_7_out0)
		{
			param
				filter :(reading.readingType == "ECGLeadI" || reading.readingType ==
					"RESP") &&(patientId == "patient-1") ;
			output
				Functor_12_out0 : patient_id = patientId, readingType =
					reading.readingType ;
		}

		(stream<list<Functor_11_out0> observations, rstring patient_id,
			rstring readingType, uint64 windowCount> Aggregate_12_out0) as
			Aggregate_12 = Aggregate(Functor_12_out0 as inPort0Alias)
		{
			logic
				state :
				{
					mutable uint64 _winCount = 0ul ;
				}

			window
				inPort0Alias : tumbling, time(1), partitioned ;
			param
				partitionBy : patient_id, readingType ;
			output
				Aggregate_12_out0 : observations = Collect(inPort0Alias), windowCount =
					_winCount ++ ;
		}

}

