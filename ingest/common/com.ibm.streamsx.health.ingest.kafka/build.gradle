apply plugin: 'java'
apply from: '../../../common.gradle'

def STREAMS_INSTALL = System.getenv("STREAMS_INSTALL")
def jsonToolkitPath = STREAMS_INSTALL + '/toolkits/com.ibm.streamsx.json'
def topologyToolkitPath = STREAMS_INSTALL + '/toolkits/com.ibm.streamsx.topology'
def healthIngestToolkitPath = '../com.ibm.streamsx.health.ingest'
def messagingToolkitPath = STREAMS_INSTALL + '/toolkits/com.ibm.streamsx.messaging'

sourceSets {
    main {
        java {
            srcDir 'impl/java/src'
        }
    }
}

repositories { 
    mavenCentral() 
}

dependencies {
    compile fileTree(dir: System.getenv("STREAMS_INSTALL") + '/lib', include: ['*.jar'])
    compile fileTree(dir: 'opt/downloaded', include: ['*.jar'])
}

task buildToolkit {
    doLast {
	tasks.copyJarToImpl.execute()
        splMakeToolkit()
    }
}

task buildIngestToolkit(type: GradleBuild) {
    buildFile = '../com.ibm.streamsx.health.ingest/build.gradle'
    tasks = ['build']
}

task buildServices(dependsOn: ['buildIngestToolkit', 'buildToolkit']) {
    doLast {
        def serviceToolkitPath = jsonToolkitPath + ':' + topologyToolkitPath + ':' + healthIngestToolkitPath + ':' + messagingToolkitPath
        compileApp('com.ibm.streamsx.health.ingest.kafka.service', 'PublishJsonToKafka', serviceToolkitPath)
        compileApp('com.ibm.streamsx.health.ingest.kafka.service', 'SubscribeJsonFromKafka', serviceToolkitPath)
    }
}

task cleanToolkit {
    doLast {
        splCleanToolkit()
        delete 'output'
    }   
}

task copyJarToImpl(type: Copy) {
    from fileTree(dir : 'build/libs', include : ['*.jar'])
    into 'impl/lib'
}

task deleteDeps(type: Delete) {
    delete fileTree(dir: 'impl/lib', include: ['*.jar'])
    delete 'impl/java/bin'
}

build.dependsOn buildToolkit, buildServices
clean.dependsOn deleteDeps, cleanToolkit