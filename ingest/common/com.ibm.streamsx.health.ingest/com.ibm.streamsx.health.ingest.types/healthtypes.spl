// begin_generated_IBM_copyright_prolog                                       
//                                                                            
// This is an automatically generated copyright prolog.                       
// After initializing,  DO NOT MODIFY OR MOVE                                 
//****************************************************************************
// Copyright (C) 2016 International Business Machines Corporation             
// All Rights Reserved                                                        
//****************************************************************************
// end_generated_IBM_copyright_prolog                                         
namespace com.ibm.streamsx.health.ingest.types ;

public rstring STREAMS_SYSTEM_NAME() {
	return "streamsx.health/1.0";
}

/**
 * Observation Data Types
 */
type Reading = int64 ts, ReadingType readingType, float64 value, rstring uom;

type ReadingType = rstring system, rstring code;

type Observation = Device device, rstring patientId, ReadingSource readingSource, Reading reading;

type ReadingSource = rstring id, rstring sourceType, rstring deviceId;

type Device = rstring id, rstring locationId;


/**
 * Represent EMR records
 */
type ClinicalNoteEvent = rstring patientId, rstring eventType,
	rstring eventName, int64 ts, float64 value, rstring uom ;

/** 
 * ADT Event Data Types
 */

type MessageInfo = rstring receivingApp, rstring messageType, rstring receivingFacility, rstring sendingFacility, rstring messageTs, rstring sendingApp;

type EventDetails = rstring eventType, rstring recordTs, rstring eventTs;

type Patient = list<rstring> alternateNames, list<rstring> alternateIds, rstring gender, rstring name, rstring dateOfBirth, rstring id, rstring status;

type Clinician = rstring name, rstring id;

type PatientVisit = rstring patientClass, rstring visitNumber, rstring priorLocation, rstring location, list<Clinician> attendingDoctors, list<Clinician> consultingDoctors;

type AdtEvent = MessageInfo msg, EventDetails evt, Patient patient, PatientVisit pv;

/**
 * Schema type for service publish
 */
type PublishJson = rstring jsonString ;



//type SignalECGInternal_T = float64 ts, int32 ch1, int32 ch2 ;
//type PatientECGInternal_T = SignalECGInternal_T, tuple<rstring patientId> ;